<html>
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="viewport" content="width=device-width, initial-scale=0.6, maximum-scale=0.6, user-scalable=0"/>
<meta name="HandheldFriendly" content="true" />
<meta name="apple-mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-status-bar-style" content="black" />
<head>
<style>

body {
	position: relative;
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  margin: 0px;
}

html, body {
	overflow: hidden;
}

</style>
<script src="https://cdn.socket.io/socket.io-1.3.5.js"></script>
<script>

var socket;
var connected = false;

var FULL_JOYSTICK_SIZE = 300;
var JOYSTICK_SIZE = 40;

function init() {
	var ip = window.location.href.replace('http://', '').replace('/', '').replace('3000', '4000');
	socket = io(ip);
	socket.on('connect', function() {
		connected = true;
		console.log('Connected to socket.io server');
	});

	createButton(document.getElementById('jump'), 'jump');
	createButton(document.getElementById('crouch'), 'crouch');
	createButton(document.getElementById('click'), 'click');
	createButton(document.getElementById('rclick'), 'rclick');

	createButton(document.getElementById('press1'), '1');
	createButton(document.getElementById('press2'), '2');
	createButton(document.getElementById('press3'), '3');
	createButton(document.getElementById('press4'), '4');

	createJoystick(document.getElementById('move'), changeMoveJoystick);
	createJoystick(document.getElementById('mouse'), moveMouseJoystick);

	//hideAddressBar();
	setInterval(function() {
		window.scrollTo(0, 1);
	});
}

function hideAddressBar() {
	(function( win ){
		var doc = win.document;
		
		// If there's a hash, or addEventListener is undefined, stop here
		if(!win.navigator.standalone && !location.hash && win.addEventListener ){
			
			//scroll to 1
			win.scrollTo( 0, 1 );
			var scrollTop = 1,
				getScrollTop = function(){
					return win.pageYOffset || doc.compatMode === "CSS1Compat" && doc.documentElement.scrollTop || doc.body.scrollTop || 0;
				},
			
				//reset to 0 on bodyready, if needed
				bodycheck = setInterval(function(){
					if( doc.body ){
						clearInterval( bodycheck );
						scrollTop = getScrollTop();
						win.scrollTo( 0, scrollTop === 1 ? 0 : 1 );
					}	
				}, 15 );
			
			win.addEventListener( "load", function(){
				setTimeout(function(){
					//at load, if user hasn't scrolled more than 20 or so...
					if( getScrollTop() < 20 ){
						//reset to hide addr bar at onload
						win.scrollTo( 0, scrollTop === 1 ? 0 : 1 );
					}
				}, 0);
			}, false );
		}
	})( this );
}

function changeMoveJoystick(x, y) {
	if (!connected) console.log('Not connected!');

	x = Math.min(1, Math.max(-1, x));
	y = Math.min(1, Math.max(-1, y));

	//document.getElementById('info').innerHTML = x + ', ' + y;

	socket.emit('joystick',{ x: x, y: y });
}

function moveMouseJoystick(x, y) {
	if (!connected) console.log('Not connected!');

	x = Math.min(1, Math.max(-1, x));
	y = Math.min(1, Math.max(-1, y));

	//document.getElementById('info').innerHTML = x + ', ' + y;

	socket.emit('movemouse',{ x: x, y: y });
}

function pressButton(b) {
	if (!connected) return;
	socket.emit('press',b);
}

function releaseButton(b) {
	if (!connected) return;
	socket.emit('release',b);
}



function createJoystick(canvas, action) {
	function createInterval() {
		if (interval) clearInterval(interval);
		interval = setInterval(function() {
			action(0, 0);
		}, 1000);
	}

	var touching = false;
	var center = { x: FULL_JOYSTICK_SIZE/2, y: FULL_JOYSTICK_SIZE/2 };
	var joystickPos = { x: 0, y: 0 };

	var thisTouchNum = 0;

	function touchDown(e) {
		touching = true;
		clearInterval(interval);
		e.preventDefault();
		var touchList = (e.originalEvent ? (e.originalEvent.touches || e.changedTouches) : (e.touches || e.changedTouches));
		thisTouchNum = touchList.length - 1;
		var touch = touchList[thisTouchNum];
		var rect = canvas.getBoundingClientRect();
		joystickPos.x = touch.pageX - center.x - rect.left;
		joystickPos.y = touch.pageY - center.y - rect.top;

		var smallOffset = 30;
		var maxDistance = FULL_JOYSTICK_SIZE - JOYSTICK_SIZE*4 - smallOffset;
		action(joystickPos.x / maxDistance, joystickPos.y / maxDistance);
	}

	function touchMove(e) {
		e.preventDefault();
		var touchList = (e.originalEvent ? (e.originalEvent.touches || e.changedTouches) : (e.touches || e.changedTouches));
		if (touchList.length == 1 && thisTouchNum == 1) thisTouchNum--;
		var touch = touchList[thisTouchNum];
		
		var rect = canvas.getBoundingClientRect();
		joystickPos.x = touch.pageX - center.x - rect.left;
		joystickPos.y = touch.pageY - center.y - rect.top;
		var distance = Math.sqrt(Math.pow(joystickPos.x, 2) + Math.pow(joystickPos.y, 2));
		var smallOffset = 30;
		var maxDistance = FULL_JOYSTICK_SIZE - JOYSTICK_SIZE*4 - smallOffset;

		if (distance > maxDistance) {
			var offset = distance / maxDistance;
			joystickPos.x /= offset;
			joystickPos.y /= offset;
		}

		action(joystickPos.x / maxDistance, joystickPos.y / maxDistance);
	}

	function touchUp() {
		touching = false;
		joystickPos.x = 0;
		joystickPos.y = 0;

		action(0, 0);
		createInterval();

		//alert(JSON.stringify((e.originalEvent ? (e.originalEvent.touches || e.changedTouches) : (e.touches || e.changedTouches))));

		e.preventDefault();
	}

	function draw() {
		ctx.clearRect(0, 0, FULL_JOYSTICK_SIZE, FULL_JOYSTICK_SIZE);

		ctx.beginPath();
		ctx.arc(FULL_JOYSTICK_SIZE/2, FULL_JOYSTICK_SIZE/2, FULL_JOYSTICK_SIZE/2-3, 0, Math.PI*2);
		ctx.closePath();
		ctx.stroke();

		ctx.beginPath();
		ctx.arc(FULL_JOYSTICK_SIZE/2 + joystickPos.x, FULL_JOYSTICK_SIZE/2 + joystickPos.y, JOYSTICK_SIZE, 0, Math.PI*2)
		ctx.closePath();
		ctx.fillStyle = 'rgb(0, 0, 0)';
		ctx.fill();
		
		window.requestAnimationFrame(draw);
	}

	var ctx = canvas.getContext('2d');
	interval = null;

	canvas.addEventListener('touchstart', touchDown, false);
	canvas.addEventListener('touchmove', touchMove, false);
	canvas.addEventListener('touchend', touchUp, false);

	draw();
}

function createButton(canvas, key) {
	var pressed = false;
	canvas.addEventListener('touchstart', function() {
		pressButton(key);
		pressed = true;
	});
	canvas.addEventListener('touchend', function() {
		releaseButton(key);
		pressed = false;
	});
	var drawButton = function() {
		var ctx = canvas.getContext('2d');
		if (pressed) ctx.fillStyle = 'rgb(0, 0, 0)';
		else ctx.fillStyle = 'rgb(255, 255, 255)';
		ctx.fillRect(0, 0, canvas.width, canvas.height);
		window.requestAnimationFrame(drawButton);
	}
	drawButton();
}

</script>
</head>
<body onLoad=init()>
	<canvas id=move width=300 height=300 style="border: 1px solid black">This isn't gonna work. You don't support canvases. Search what that means online.</canvas>
	<canvas id=jump width=150 height=300 style="border: 1px solid black"></canvas>
	<canvas id=crouch width=150 height=300 style="border: 1px solid black"></canvas>
	<canvas id=mouse width=300 height=300 style="border: 1px solid black"></canvas><br>

	<canvas id=rclick width=450 height=75 style="border: 1px solid black"></canvas>
	<canvas id=click width=450 height=75 style="border: 1px solid black"></canvas><br>

	<canvas id=press1 width=225 height=100 style="border: 1px solid black"></canvas>
	<canvas id=press2 width=225 height=100 style="border: 1px solid black"></canvas>
	<canvas id=press3 width=225 height=100 style="border: 1px solid black"></canvas>
	<canvas id=press4 width=225 height=100 style="border: 1px solid black"></canvas>
</body>
</html>